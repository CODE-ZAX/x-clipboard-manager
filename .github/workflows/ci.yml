name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Test build on macOS with multiple Qt versions
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        qt-version: ["6.2", "6.5"]

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt-version }}
          cache: true

      - name: Install dependencies
        run: |
          # Install or upgrade cmake and ninja (handle existing installations)
          brew list cmake || brew install cmake
          brew list ninja || brew install ninja

      - name: Test qmake build
        run: |
          # Clean any existing build artifacts and cache
          make clean 2>/dev/null || true
          rm -f .qmake.stash Makefile

          # Configure qmake with SDK version check disabled
          qmake ClipboardManager.pro CONFIG+=sdk_no_version_check

          # Debug: Show generated Makefile targets
          echo "=== Available Makefile targets ==="
          make help 2>/dev/null || grep "^[a-zA-Z]" Makefile | head -10 || true
          echo "=================================="

          # Build the application (use specific target if needed)
          if make -n Xclipy 2>/dev/null; then
            make Xclipy -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
          else
            make all -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
          fi

      - name: Test CMake build
        run: |
          mkdir build-test
          cd build-test
          cmake .. -G Ninja
          ninja

  # Universal macOS build and packaging
  build-macos:
    if: github.ref == 'refs/heads/main'
    runs-on: macos-13 # Use macOS 13 for better Qt compatibility
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt 6.9
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.9.2"
          cache: true

      - name: Install dependencies
        run: |
          # Install or upgrade cmake and ninja (handle existing installations)
          brew list cmake || brew install cmake
          brew list ninja || brew install ninja
          brew list create-dmg || brew install create-dmg

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep -Eo 'set\(XCLIPY_VERSION "[0-9]+\.[0-9]+\.[0-9]+"\)' CMakeLists.txt | head -1 | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Clean build environment
        run: |
          # Clean any existing build artifacts and Qt cache
          rm -rf build/ .qmake.stash Makefile
          # Ensure scripts are executable
          chmod +x scripts/*.sh

      - name: Create universal macOS build
        run: |
          ./scripts/deploy.sh

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xclipy-macos-universal
          path: |
            build/*.dmg
            build/*.zip
            build/*-source.tar.gz
          retention-days: 30

  # Create GitHub release with all artifacts
  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-macos

    steps:
      - uses: actions/checkout@v4

      - name: Extract version and changelog
        id: version
        run: |
          VERSION=$(grep -Eo 'set\(XCLIPY_VERSION "[0-9]+\.[0-9]+\.[0-9]+"\)' CMakeLists.txt | head -1 | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

          # Extract current version changelog
          if [[ -f "CHANGELOG.md" ]]; then
            # Get content between current version and next version or end of file
            CHANGELOG=$(awk '/^## \['"$VERSION"'\]/, /^## \[/ {if (/^## \[/ && !/^## \['"$VERSION"'\]/) exit; print}' CHANGELOG.md | head -n -1 || true)
            if [[ -n "$CHANGELOG" ]]; then
              echo "changelog<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGELOG" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files

          # Copy macOS files
          find artifacts/xclipy-macos-universal/ -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*-source.tar.gz" \) -exec cp {} release-files/ \;

          # List what we're releasing
          echo "Release files:"
          ls -la release-files/

      - name: Check if release exists
        id: check_release
        run: |
          if git tag -l "${{ steps.version.outputs.tag }}" | grep -q "${{ steps.version.outputs.tag }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release if it exists
        if: steps.check_release.outputs.exists == 'true'
        run: |
          gh release delete "${{ steps.version.outputs.tag }}" --yes || true
          git tag -d "${{ steps.version.outputs.tag }}" || true
          git push origin --delete "${{ steps.version.outputs.tag }}" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Xclipy ${{ steps.version.outputs.version }}"
          body: |
            ## Xclipy ${{ steps.version.outputs.version }}

            ${{ steps.version.outputs.changelog }}

            ### Downloads

            **macOS (Universal - Intel & Apple Silicon):**
            - `.dmg` - Drag and drop installer
            - `.zip` - Portable archive

            **Source Code:**
            - `xclipy-${{ steps.version.outputs.version }}-source.tar.gz` - Complete source distribution

            ### Installation

            **macOS:**
            1. Download the `.dmg` file
            2. Open the DMG and drag Xclipy to Applications
            3. Run Xclipy from Applications or Spotlight

            ### System Requirements
            - macOS 11.0+ (Universal - supports both Intel and Apple Silicon)

            ---

            *Built automatically from commit ${{ github.sha }}*
          files: release-files/*
          draft: false
          prerelease: false
          make_latest: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
